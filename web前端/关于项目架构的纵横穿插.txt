一个软件项目的构建需要考虑到方方面面

  从一个项目的开始到结束的纵向业务逻辑顺向架构，再从项目开始之初贯穿整个项目的一些包括但不限于工具（类） 性能优化 公共资源（包括图片 音频 视频 css js以及复用的公共组件之类） 网络通信（各种服务的提供）  错误处理 路由处理 状态管理  第三方类库的提供 UI组件库 项目配置（各个环境下的配置）
 页面风格一致之类的问题（用户体验的提升）等，其中涉及到的设计模式知识 面对对象编程等等的知识。。。  

  纵向逻辑：包括项目的层叠性 顺序性 单一入口性质以及单点登录的问题
 其中涉及到的方方面面的技术问题 此处主要是流程图的完成以及根据它之后完成之后的技术选型和项目规划 包括预见项目可能遇到的疑难杂症（技术难点 性能瓶颈 用户体验等问题）

  横向穿插：
    1.工具（类）

       代码风格检查 eslint
       
       自动化测试（单元测试 端到端测试）

       持续集成/持续部署

       工具类的使用  数据格式化/转换/检测/合并的各种方法以及提供各种侧翼支持的工具（包括但不限于第三方工具） 


    2.性能优化（服务端渲染 首屏加载 缓存问题 请求合并 CDN引入 图片压缩 懒加载 数据传输优化等等）

    3.公共资源（图片 音频 视频 css js 图标字体 资料文件类型的资源（地图数据 省市县数据等） 公共组件）

    4.服务支持 （只要涉及网络通信协议（http/https/ws） 文件协议 数据流传输 跨域问题 ）
        1.http
        2.https
        3.ws
        4.跨域

    5.错误处理 （包括异常抛出 错误提示 catch处理等）

    6.路由管理 前端路由管理（根据各项目不同构造不同的路由映射表 可根据角色/id/path等来构造 ）

    7.状态管理 对于大型项目 对于涉及前后通信以及整个项目的状态可集中管理 应尽量细化状态

    8.关于第三方类库的提供可进行集中管理 按需加载 CDN引入 对于简单可替代的可选自有类库（自己造轮子）
 
    9.UI组件库（尽量契合设计图和项目业务）

    10.项目配置 包括但不限于资源服务器加载 不同环境路径加载 不同源路径加载

    11.页面风格（颜色 大小 字体 布局 等应趋于一致 落点范围原则上应不超过5个）

